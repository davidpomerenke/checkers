{"version":3,"sources":["checkers.js","App.js","serviceWorker.js","index.js"],"names":["checkers","Game","initialState","p","q","player","opponent","state","actions","result","action","terminalTest","length","utility","heuristic","Tile","y","x","className","this","colour","props","React","Component","Row","map","key","toString","Board","Checker","style","top","left","Checkers","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13f2b85c.chunk.js","sourcesContent":["import { Game } from 'aima'\n\nexport const checkers = new Game({\n  initialState: {\n    p: [\n      [0, 0], [0, 2], [0, 4], [0, 6],\n      [1, 1], [1, 3], [1, 5], [1, 7],\n      [2, 0], [2, 2], [2, 4], [2, 6]\n    ],\n    q: [\n      [5, 1], [5, 3], [5, 5], [5, 7],\n      [6, 0], [6, 2], [6, 4], [6, 6],\n      [7, 1], [7, 3], [7, 5], [7, 7]\n    ],\n    player: 'p',\n    opponent: 'q'\n  },\n  player: state => state.player,\n  actions: state => [\n    [0, 0]\n  ],\n  result: (state, action) => 'todo',\n  terminalTest: state =>\n    state.p.length === 0 ||\n    state.q.length === 0 ||\n    checkers.actions(state).length === 0,\n  utility: state => state.p.length - state.q.length,\n  heuristic: state => state.p.length - state.q.length\n})\n","import React from 'react'\nimport './App.css'\nimport './checkers'\nimport { checkers } from './checkers'\n\nclass Tile extends React.Component {\n  colour (y, x) {\n    return (y + x) % 2 === 0 ? 'light-tile' : 'dark-tile'\n  }\n\n  render () {\n    return (\n      <div className={this.colour(this.props.y, this.props.x)} />\n    )\n  }\n}\n\nclass Row extends React.Component {\n  render () {\n    return (\n      <div className='row'>\n        {\n          [0, 1, 2, 3, 4, 5, 6, 7].map(x =>\n            <Tile x={x} y={this.props.y} state={this.props.state} key={x.toString()} />\n          )\n        }\n      </div>\n    )\n  }\n}\n\nclass Board extends React.Component {\n  render () {\n    return (\n      <div className='board'>\n        {\n          [0, 1, 2, 3, 4, 5, 6, 7].map(y =>\n            <Row y={y} state={this.props.state} key={y.toString()} />\n          )\n        }\n      </div>\n    )\n  }\n}\n\nconst checkerStyle = (y, x) => ({\n  top: 'calc(50vh - 50vmin + 1.25vmin + ' + 12.5 * (7 - y) + 'vmin)',\n  left: 'calc(50vw - 50vmin + 1.25vmin + ' + 12.5 * x + 'vmin)'\n})\n\nclass Checker extends React.Component {\n  render () {\n    return (\n      <div className='checker' style={checkerStyle(this.props.y, this.props.x)} />\n    )\n  }\n}\n\nclass Checkers extends React.Component {\n  render () {\n    return checkers.initialState[this.props.player].map(([y, x]) =>\n      <Checker y={y} x={x} key={y + ',' + x} />\n    )\n  }\n}\n\nfunction App () {\n  return (\n    <div className='app'>\n      <Board state='' />\n      <Checkers player='p' />\n      <Checkers player='q' />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}